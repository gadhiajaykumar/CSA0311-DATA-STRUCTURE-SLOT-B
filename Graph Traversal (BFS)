#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Structure to represent a graph
struct Graph {
    int V; // Number of vertices
    int** adjMatrix; // Adjacency matrix
};

// Function to create a graph with V vertices
struct Graph* createGraph(int V) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->V = V;

    // Allocate memory for adjacency matrix
    graph->adjMatrix = (int**)malloc(V * sizeof(int*));
    for (int i = 0; i < V; i++) {
        graph->adjMatrix[i] = (int*)calloc(V, sizeof(int)); // Initialize with 0
    }
    return graph;
}

// Function to add an edge to the graph
void addEdge(struct Graph* graph, int u, int v) {
    graph->adjMatrix[u][v] = 1;
    graph->adjMatrix[v][u] = 1; // For undirected graph
}

// Function to perform BFS traversal
void BFS(struct Graph* graph, int start) {
    bool visited[graph->V]; // Array to track visited vertices
    for (int i = 0; i < graph->V; i++) {
        visited[i] = false; // Initially, all vertices are unvisited
    }

    // Create a queue for BFS
    int queue[graph->V], front = 0, rear = -1;
    
    // Mark the starting node as visited and enqueue it
    visited[start] = true;
    queue[++rear] = start;

    while (front <= rear) {
        int current = queue[front++]; // Dequeue a vertex from queue
        printf("%d ", current); // Print the vertex
        
        // Get all adjacent vertices of the dequeued vertex
        for (int i = 0; i < graph->V; i++) {
            if (graph->adjMatrix[current][i] == 1 && !visited[i]) {
                visited[i] = true;
                queue[++rear] = i; // Enqueue unvisited adjacent vertices
            }
        }
    }
}

// Main function to test the BFS
int main() {
    struct Graph* graph = createGraph(5); // Create a graph with 5 vertices
    
    // Add edges to the graph
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 4);

    printf("BFS traversal starting from vertex 0:\n");
    BFS(graph, 0); // Start BFS traversal from vertex 0

    return 0;
}
